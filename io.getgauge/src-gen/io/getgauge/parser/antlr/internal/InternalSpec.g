/*
* generated by Xtext
*/
grammar InternalSpec;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package io.getgauge.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package io.getgauge.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import io.getgauge.services.SpecGrammarAccess;

}

@parser::members {

 	private SpecGrammarAccess grammarAccess;
 	
    public InternalSpecParser(TokenStream input, SpecGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected SpecGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getDefinitionsAbstractEntityParserRuleCall_0()); 
	    }
		lv_definitions_0_0=ruleAbstractEntity		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"definitions",
        		lv_definitions_0_0, 
        		"AbstractEntity");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleAbstractEntity
entryRuleAbstractEntity returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractEntityRule()); }
	 iv_ruleAbstractEntity=ruleAbstractEntity 
	 { $current=$iv_ruleAbstractEntity.current; } 
	 EOF 
;

// Rule AbstractEntity
ruleAbstractEntity returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getAbstractEntityAccess().getSpecParserRuleCall_0_0()); 
    }
    this_Spec_0=ruleSpec
    { 
        $current = $this_Spec_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAbstractEntityAccess().getScenarioParserRuleCall_0_1()); 
    }
    this_Scenario_1=ruleScenario
    { 
        $current = $this_Scenario_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAbstractEntityAccess().getStepParserRuleCall_0_2()); 
    }
    this_Step_2=ruleStep
    { 
        $current = $this_Step_2.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getAbstractEntityAccess().getCommentParserRuleCall_1()); 
    }
    this_Comment_3=ruleComment
    { 
        $current = $this_Comment_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSpec
entryRuleSpec returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSpecRule()); }
	 iv_ruleSpec=ruleSpec 
	 { $current=$iv_ruleSpec.current; } 
	 EOF 
;

// Rule Spec
ruleSpec returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='# ' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSpecAccess().getNumberSignSpaceKeyword_0());
    }
(
(
(
		lv_name_1_1=RULE_WORD
		{
			newLeafNode(lv_name_1_1, grammarAccess.getSpecAccess().getNameWORDTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSpecRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_1, 
        		"WORD");
	    }

    |		lv_name_1_2=RULE_SEPARATORS
		{
			newLeafNode(lv_name_1_2, grammarAccess.getSpecAccess().getNameSEPARATORSTerminalRuleCall_1_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSpecRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_2, 
        		"SEPARATORS");
	    }

)

)
)+(this_SINGLE_NL_2=RULE_SINGLE_NL
    { 
    newLeafNode(this_SINGLE_NL_2, grammarAccess.getSpecAccess().getSINGLE_NLTerminalRuleCall_2()); 
    }
)+)
;





// Entry rule entryRuleScenario
entryRuleScenario returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getScenarioRule()); }
	 iv_ruleScenario=ruleScenario 
	 { $current=$iv_ruleScenario.current; } 
	 EOF 
;

// Rule Scenario
ruleScenario returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='## ' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getScenarioAccess().getNumberSignNumberSignSpaceKeyword_0());
    }
(
(
(
		lv_name_1_1=RULE_WORD
		{
			newLeafNode(lv_name_1_1, grammarAccess.getScenarioAccess().getNameWORDTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScenarioRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_1, 
        		"WORD");
	    }

    |		lv_name_1_2=RULE_SEPARATORS
		{
			newLeafNode(lv_name_1_2, grammarAccess.getScenarioAccess().getNameSEPARATORSTerminalRuleCall_1_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScenarioRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_2, 
        		"SEPARATORS");
	    }

)

)
)+(this_SINGLE_NL_2=RULE_SINGLE_NL
    { 
    newLeafNode(this_SINGLE_NL_2, grammarAccess.getScenarioAccess().getSINGLE_NLTerminalRuleCall_2()); 
    }
)+)
;





// Entry rule entryRuleStep
entryRuleStep returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStepRule()); }
	 iv_ruleStep=ruleStep 
	 { $current=$iv_ruleStep.current; } 
	 EOF 
;

// Rule Step
ruleStep returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStepAccess().getStepAction_0(),
            $current);
    }
)	otherlv_1='* ' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStepAccess().getAsteriskSpaceKeyword_1());
    }
(((
(
		{ 
	        newCompositeNode(grammarAccess.getStepAccess().getStaticParamsStaticParamParserRuleCall_2_0_0_0()); 
	    }
		lv_staticParams_2_0=ruleStaticParam		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStepRule());
	        }
       		add(
       			$current, 
       			"staticParams",
        		lv_staticParams_2_0, 
        		"StaticParam");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getStepAccess().getDynamicParamsDynamicParamParserRuleCall_2_0_1_0()); 
	    }
		lv_dynamicParams_3_0=ruleDynamicParam		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStepRule());
	        }
       		add(
       			$current, 
       			"dynamicParams",
        		lv_dynamicParams_3_0, 
        		"DynamicParam");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |this_WORD_4=RULE_WORD
    { 
    newLeafNode(this_WORD_4, grammarAccess.getStepAccess().getWORDTerminalRuleCall_2_0_2()); 
    }
)(this_SEPARATORS_5=RULE_SEPARATORS
    { 
    newLeafNode(this_SEPARATORS_5, grammarAccess.getStepAccess().getSEPARATORSTerminalRuleCall_2_1()); 
    }
)*)+(this_SINGLE_NL_6=RULE_SINGLE_NL
    { 
    newLeafNode(this_SINGLE_NL_6, grammarAccess.getStepAccess().getSINGLE_NLTerminalRuleCall_3()); 
    }
)+)
;





// Entry rule entryRuleStaticParam
entryRuleStaticParam returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStaticParamRule()); }
	 iv_ruleStaticParam=ruleStaticParam 
	 { $current=$iv_ruleStaticParam.current; } 
	 EOF 
;

// Rule StaticParam
ruleStaticParam returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_STATIC_PARAM
		{
			newLeafNode(lv_value_0_0, grammarAccess.getStaticParamAccess().getValueSTATIC_PARAMTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStaticParamRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"STATIC_PARAM");
	    }

)
)
;





// Entry rule entryRuleDynamicParam
entryRuleDynamicParam returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDynamicParamRule()); }
	 iv_ruleDynamicParam=ruleDynamicParam 
	 { $current=$iv_ruleDynamicParam.current; } 
	 EOF 
;

// Rule DynamicParam
ruleDynamicParam returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='<' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDynamicParamAccess().getLessThanSignKeyword_0());
    }
(
(
(
		lv_type_1_1=	'table' 
    {
        newLeafNode(lv_type_1_1, grammarAccess.getDynamicParamAccess().getTypeTableKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDynamicParamRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_1_1, null);
	    }

    |		lv_type_1_2=	'file' 
    {
        newLeafNode(lv_type_1_2, grammarAccess.getDynamicParamAccess().getTypeFileKeyword_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDynamicParamRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_1_2, null);
	    }

)

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDynamicParamAccess().getColonKeyword_2());
    }
(
(
		lv_value_3_0=RULE_DYNAMIC_PARAM_VALUE
		{
			newLeafNode(lv_value_3_0, grammarAccess.getDynamicParamAccess().getValueDYNAMIC_PARAM_VALUETerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDynamicParamRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"DYNAMIC_PARAM_VALUE");
	    }

)
)	otherlv_4='>' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDynamicParamAccess().getGreaterThanSignKeyword_4());
    }
)
;





// Entry rule entryRuleComment
entryRuleComment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCommentRule()); }
	 iv_ruleComment=ruleComment 
	 { $current=$iv_ruleComment.current; } 
	 EOF 
;

// Rule Comment
ruleComment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		lv_text_0_1=RULE_WORD
		{
			newLeafNode(lv_text_0_1, grammarAccess.getCommentAccess().getTextWORDTerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCommentRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"text",
        		lv_text_0_1, 
        		"WORD");
	    }

    |		lv_text_0_2=RULE_SEPARATORS
		{
			newLeafNode(lv_text_0_2, grammarAccess.getCommentAccess().getTextSEPARATORSTerminalRuleCall_0_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCommentRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"text",
        		lv_text_0_2, 
        		"SEPARATORS");
	    }

    |		lv_text_0_3=RULE_STATIC_PARAM
		{
			newLeafNode(lv_text_0_3, grammarAccess.getCommentAccess().getTextSTATIC_PARAMTerminalRuleCall_0_0_2()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCommentRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"text",
        		lv_text_0_3, 
        		"STATIC_PARAM");
	    }

    |		lv_text_0_4=	'.' 
    {
        newLeafNode(lv_text_0_4, grammarAccess.getCommentAccess().getTextFullStopKeyword_0_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCommentRule());
	        }
       		addWithLastConsumed($current, "text", lv_text_0_4, null);
	    }

)

)
)+(this_SINGLE_NL_1=RULE_SINGLE_NL
    { 
    newLeafNode(this_SINGLE_NL_1, grammarAccess.getCommentAccess().getSINGLE_NLTerminalRuleCall_1()); 
    }
)+)
;





RULE_SINGLE_NL : '\r'? '\n';

RULE_WORD : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_SEPARATORS : ~(('\r'|'\n'|'a'..'z'|'A'..'Z'|'0'..'9'|'_'));

RULE_DYNAMIC_PARAM_VALUE : RULE_WORD ('.' ('txt'|'csv'))?;

RULE_STATIC_PARAM : '"' ( options {greedy=false;} : . )*'"';


