/*
* generated by Xtext
*/
package io.getgauge.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class SpecGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cSINGLE_NLTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cDefinitionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDefinitionsElementParserRuleCall_2_0 = (RuleCall)cDefinitionsAssignment_2.eContents().get(0);
		
		/// *
		// * TODO
		// * - Errors if last line is not a newline
		// * / Model:
		//	{Model} SINGLE_NL* definitions+=Element*;
		public ParserRule getRule() { return rule; }

		//{Model} SINGLE_NL* definitions+=Element*
		public Group getGroup() { return cGroup; }

		//{Model}
		public Action getModelAction_0() { return cModelAction_0; }

		//SINGLE_NL*
		public RuleCall getSINGLE_NLTerminalRuleCall_1() { return cSINGLE_NLTerminalRuleCall_1; }

		//definitions+=Element*
		public Assignment getDefinitionsAssignment_2() { return cDefinitionsAssignment_2; }

		//Element
		public RuleCall getDefinitionsElementParserRuleCall_2_0() { return cDefinitionsElementParserRuleCall_2_0; }
	}

	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSpecParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cScenarioParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStepParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCommentParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTagsParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Element:
		//	Spec | Scenario | Step | Comment | Tags;
		public ParserRule getRule() { return rule; }

		//Spec | Scenario | Step | Comment | Tags
		public Alternatives getAlternatives() { return cAlternatives; }

		//Spec
		public RuleCall getSpecParserRuleCall_0() { return cSpecParserRuleCall_0; }

		//Scenario
		public RuleCall getScenarioParserRuleCall_1() { return cScenarioParserRuleCall_1; }

		//Step
		public RuleCall getStepParserRuleCall_2() { return cStepParserRuleCall_2; }

		//Comment
		public RuleCall getCommentParserRuleCall_3() { return cCommentParserRuleCall_3; }

		//Tags
		public RuleCall getTagsParserRuleCall_4() { return cTagsParserRuleCall_4; }
	}

	public class SpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Spec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cNumberSignSpaceKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameTextPartParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final RuleCall cSINGLE_NLTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameTextPartParserRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final RuleCall cSINGLE_NLTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cSINGLE_NLTerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		
		//// Two formats of Markdown H1
		//Spec:
		//	"# " name+=TextPart+ SINGLE_NL+ | name+=TextPart+ SINGLE_NL "="+ SINGLE_NL+;
		public ParserRule getRule() { return rule; }

		//"# " name+=TextPart+ SINGLE_NL+ | name+=TextPart+ SINGLE_NL "="+ SINGLE_NL+
		public Alternatives getAlternatives() { return cAlternatives; }

		//"# " name+=TextPart+ SINGLE_NL+
		public Group getGroup_0() { return cGroup_0; }

		//"# "
		public Keyword getNumberSignSpaceKeyword_0_0() { return cNumberSignSpaceKeyword_0_0; }

		//name+=TextPart+
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//TextPart
		public RuleCall getNameTextPartParserRuleCall_0_1_0() { return cNameTextPartParserRuleCall_0_1_0; }

		//SINGLE_NL+
		public RuleCall getSINGLE_NLTerminalRuleCall_0_2() { return cSINGLE_NLTerminalRuleCall_0_2; }

		//name+=TextPart+ SINGLE_NL "="+ SINGLE_NL+
		public Group getGroup_1() { return cGroup_1; }

		//name+=TextPart+
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//TextPart
		public RuleCall getNameTextPartParserRuleCall_1_0_0() { return cNameTextPartParserRuleCall_1_0_0; }

		//SINGLE_NL
		public RuleCall getSINGLE_NLTerminalRuleCall_1_1() { return cSINGLE_NLTerminalRuleCall_1_1; }

		//"="+
		public Keyword getEqualsSignKeyword_1_2() { return cEqualsSignKeyword_1_2; }

		//SINGLE_NL+
		public RuleCall getSINGLE_NLTerminalRuleCall_1_3() { return cSINGLE_NLTerminalRuleCall_1_3; }
	}

	public class ScenarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Scenario");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cNumberSignNumberSignSpaceKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameTextPartParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final RuleCall cSINGLE_NLTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameTextPartParserRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final RuleCall cSINGLE_NLTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cSINGLE_NLTerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		
		//// Two formats of Markdown H2
		//Scenario:
		//	"## " name+=TextPart+ SINGLE_NL+ | name+=TextPart+ SINGLE_NL "-"+ SINGLE_NL+;
		public ParserRule getRule() { return rule; }

		//"## " name+=TextPart+ SINGLE_NL+ | name+=TextPart+ SINGLE_NL "-"+ SINGLE_NL+
		public Alternatives getAlternatives() { return cAlternatives; }

		//"## " name+=TextPart+ SINGLE_NL+
		public Group getGroup_0() { return cGroup_0; }

		//"## "
		public Keyword getNumberSignNumberSignSpaceKeyword_0_0() { return cNumberSignNumberSignSpaceKeyword_0_0; }

		//name+=TextPart+
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//TextPart
		public RuleCall getNameTextPartParserRuleCall_0_1_0() { return cNameTextPartParserRuleCall_0_1_0; }

		//SINGLE_NL+
		public RuleCall getSINGLE_NLTerminalRuleCall_0_2() { return cSINGLE_NLTerminalRuleCall_0_2; }

		//name+=TextPart+ SINGLE_NL "-"+ SINGLE_NL+
		public Group getGroup_1() { return cGroup_1; }

		//name+=TextPart+
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//TextPart
		public RuleCall getNameTextPartParserRuleCall_1_0_0() { return cNameTextPartParserRuleCall_1_0_0; }

		//SINGLE_NL
		public RuleCall getSINGLE_NLTerminalRuleCall_1_1() { return cSINGLE_NLTerminalRuleCall_1_1; }

		//"-"+
		public Keyword getHyphenMinusKeyword_1_2() { return cHyphenMinusKeyword_1_2; }

		//SINGLE_NL+
		public RuleCall getSINGLE_NLTerminalRuleCall_1_3() { return cSINGLE_NLTerminalRuleCall_1_3; }
	}

	public class StepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Step");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStepAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDefinitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefinitionStepDefinitionParserRuleCall_1_0 = (RuleCall)cDefinitionAssignment_1.eContents().get(0);
		private final RuleCall cSINGLE_NLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cSINGLE_NLTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cTableAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTableTableParserRuleCall_3_1_0 = (RuleCall)cTableAssignment_3_1.eContents().get(0);
		private final RuleCall cSINGLE_NLTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//// Markdown Unordered List - can contain parameters, Static (i.e. "foo") or Dynamic (i.e. <bar>)
		//// Can also optionally have a Table associated
		//Step:
		//	{Step} definition=StepDefinition SINGLE_NL (SINGLE_NL* table=Table)? SINGLE_NL*;
		public ParserRule getRule() { return rule; }

		//{Step} definition=StepDefinition SINGLE_NL (SINGLE_NL* table=Table)? SINGLE_NL*
		public Group getGroup() { return cGroup; }

		//{Step}
		public Action getStepAction_0() { return cStepAction_0; }

		//definition=StepDefinition
		public Assignment getDefinitionAssignment_1() { return cDefinitionAssignment_1; }

		//StepDefinition
		public RuleCall getDefinitionStepDefinitionParserRuleCall_1_0() { return cDefinitionStepDefinitionParserRuleCall_1_0; }

		//SINGLE_NL
		public RuleCall getSINGLE_NLTerminalRuleCall_2() { return cSINGLE_NLTerminalRuleCall_2; }

		//(SINGLE_NL* table=Table)?
		public Group getGroup_3() { return cGroup_3; }

		//SINGLE_NL*
		public RuleCall getSINGLE_NLTerminalRuleCall_3_0() { return cSINGLE_NLTerminalRuleCall_3_0; }

		//table=Table
		public Assignment getTableAssignment_3_1() { return cTableAssignment_3_1; }

		//Table
		public RuleCall getTableTableParserRuleCall_3_1_0() { return cTableTableParserRuleCall_3_1_0; }

		//SINGLE_NL*
		public RuleCall getSINGLE_NLTerminalRuleCall_4() { return cSINGLE_NLTerminalRuleCall_4; }
	}

	public class StepDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StepDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStepDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAsteriskSpaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Assignment cStaticParamsAssignment_2_0_0 = (Assignment)cAlternatives_2_0.eContents().get(0);
		private final RuleCall cStaticParamsStaticParamParserRuleCall_2_0_0_0 = (RuleCall)cStaticParamsAssignment_2_0_0.eContents().get(0);
		private final Assignment cDynamicParamsAssignment_2_0_1 = (Assignment)cAlternatives_2_0.eContents().get(1);
		private final RuleCall cDynamicParamsDynamicParamParserRuleCall_2_0_1_0 = (RuleCall)cDynamicParamsAssignment_2_0_1.eContents().get(0);
		private final Assignment cTextAssignment_2_0_2 = (Assignment)cAlternatives_2_0.eContents().get(2);
		private final Alternatives cTextAlternatives_2_0_2_0 = (Alternatives)cTextAssignment_2_0_2.eContents().get(0);
		private final RuleCall cTextWORDTerminalRuleCall_2_0_2_0_0 = (RuleCall)cTextAlternatives_2_0_2_0.eContents().get(0);
		private final Keyword cTextHyphenMinusKeyword_2_0_2_0_1 = (Keyword)cTextAlternatives_2_0_2_0.eContents().get(1);
		private final Keyword cTextEqualsSignKeyword_2_0_2_0_2 = (Keyword)cTextAlternatives_2_0_2_0.eContents().get(2);
		private final RuleCall cTextWSTerminalRuleCall_2_0_2_0_3 = (RuleCall)cTextAlternatives_2_0_2_0.eContents().get(3);
		private final RuleCall cTextNUMBERTerminalRuleCall_2_0_2_0_4 = (RuleCall)cTextAlternatives_2_0_2_0.eContents().get(4);
		private final Assignment cSeparatorsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSeparatorsSEPARATORSTerminalRuleCall_2_1_0 = (RuleCall)cSeparatorsAssignment_2_1.eContents().get(0);
		
		//StepDefinition:
		//	{StepDefinition} "* " ((staticParams+=StaticParam | dynamicParams+=DynamicParam | text+=(WORD | "-" | "=" | WS |
		//	NUMBER)) separators+=SEPARATORS*)+;
		public ParserRule getRule() { return rule; }

		//{StepDefinition} "* " ((staticParams+=StaticParam | dynamicParams+=DynamicParam | text+=(WORD | "-" | "=" | WS |
		//NUMBER)) separators+=SEPARATORS*)+
		public Group getGroup() { return cGroup; }

		//{StepDefinition}
		public Action getStepDefinitionAction_0() { return cStepDefinitionAction_0; }

		//"* "
		public Keyword getAsteriskSpaceKeyword_1() { return cAsteriskSpaceKeyword_1; }

		//((staticParams+=StaticParam | dynamicParams+=DynamicParam | text+=(WORD | "-" | "=" | WS | NUMBER))
		//separators+=SEPARATORS*)+
		public Group getGroup_2() { return cGroup_2; }

		//staticParams+=StaticParam | dynamicParams+=DynamicParam | text+=(WORD | "-" | "=" | WS | NUMBER)
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }

		//staticParams+=StaticParam
		public Assignment getStaticParamsAssignment_2_0_0() { return cStaticParamsAssignment_2_0_0; }

		//StaticParam
		public RuleCall getStaticParamsStaticParamParserRuleCall_2_0_0_0() { return cStaticParamsStaticParamParserRuleCall_2_0_0_0; }

		//dynamicParams+=DynamicParam
		public Assignment getDynamicParamsAssignment_2_0_1() { return cDynamicParamsAssignment_2_0_1; }

		//DynamicParam
		public RuleCall getDynamicParamsDynamicParamParserRuleCall_2_0_1_0() { return cDynamicParamsDynamicParamParserRuleCall_2_0_1_0; }

		//text+=(WORD | "-" | "=" | WS | NUMBER)
		public Assignment getTextAssignment_2_0_2() { return cTextAssignment_2_0_2; }

		//WORD | "-" | "=" | WS | NUMBER
		public Alternatives getTextAlternatives_2_0_2_0() { return cTextAlternatives_2_0_2_0; }

		//WORD
		public RuleCall getTextWORDTerminalRuleCall_2_0_2_0_0() { return cTextWORDTerminalRuleCall_2_0_2_0_0; }

		//"-"
		public Keyword getTextHyphenMinusKeyword_2_0_2_0_1() { return cTextHyphenMinusKeyword_2_0_2_0_1; }

		//"="
		public Keyword getTextEqualsSignKeyword_2_0_2_0_2() { return cTextEqualsSignKeyword_2_0_2_0_2; }

		//WS
		public RuleCall getTextWSTerminalRuleCall_2_0_2_0_3() { return cTextWSTerminalRuleCall_2_0_2_0_3; }

		//NUMBER
		public RuleCall getTextNUMBERTerminalRuleCall_2_0_2_0_4() { return cTextNUMBERTerminalRuleCall_2_0_2_0_4; }

		//separators+=SEPARATORS*
		public Assignment getSeparatorsAssignment_2_1() { return cSeparatorsAssignment_2_1; }

		//SEPARATORS
		public RuleCall getSeparatorsSEPARATORSTerminalRuleCall_2_1_0() { return cSeparatorsSEPARATORSTerminalRuleCall_2_1_0; }
	}

	public class StaticParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StaticParam");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameSTATIC_PARAMTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//StaticParam:
		//	name=STATIC_PARAM;
		public ParserRule getRule() { return rule; }

		//name=STATIC_PARAM
		public Assignment getNameAssignment() { return cNameAssignment; }

		//STATIC_PARAM
		public RuleCall getNameSTATIC_PARAMTerminalRuleCall_0() { return cNameSTATIC_PARAMTerminalRuleCall_0; }
	}

	public class DynamicParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DynamicParam");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameDYNAMIC_PARAMTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//DynamicParam:
		//	name=DYNAMIC_PARAM;
		public ParserRule getRule() { return rule; }

		//name=DYNAMIC_PARAM
		public Assignment getNameAssignment() { return cNameAssignment; }

		//DYNAMIC_PARAM
		public RuleCall getNameDYNAMIC_PARAMTerminalRuleCall_0() { return cNameDYNAMIC_PARAMTerminalRuleCall_0; }
	}

	public class TagsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Tags");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTagsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTagsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final RuleCall cWORDTerminalRuleCall_4_0 = (RuleCall)cAlternatives_4.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_4_1 = (RuleCall)cAlternatives_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_2 = (Keyword)cAlternatives_4.eContents().get(2);
		private final RuleCall cSINGLE_NLTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//Tags:
		//	{Tags} "tags" WS* ":" (WORD | WS | ",")+ SINGLE_NL+;
		public ParserRule getRule() { return rule; }

		//{Tags} "tags" WS* ":" (WORD | WS | ",")+ SINGLE_NL+
		public Group getGroup() { return cGroup; }

		//{Tags}
		public Action getTagsAction_0() { return cTagsAction_0; }

		//"tags"
		public Keyword getTagsKeyword_1() { return cTagsKeyword_1; }

		//WS*
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//(WORD | WS | ",")+
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//WORD
		public RuleCall getWORDTerminalRuleCall_4_0() { return cWORDTerminalRuleCall_4_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_4_1() { return cWSTerminalRuleCall_4_1; }

		//","
		public Keyword getCommaKeyword_4_2() { return cCommaKeyword_4_2; }

		//SINGLE_NL+
		public RuleCall getSINGLE_NLTerminalRuleCall_5() { return cSINGLE_NLTerminalRuleCall_5; }
	}

	public class CommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Comment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameTextPartParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameTextPartParserRuleCall_1_0_0 = (RuleCall)cNameAlternatives_1_0.eContents().get(0);
		private final Keyword cNameHyphenMinusKeyword_1_0_1 = (Keyword)cNameAlternatives_1_0.eContents().get(1);
		private final Keyword cNameEqualsSignKeyword_1_0_2 = (Keyword)cNameAlternatives_1_0.eContents().get(2);
		private final Keyword cNameVerticalLineKeyword_1_0_3 = (Keyword)cNameAlternatives_1_0.eContents().get(3);
		private final Keyword cNameCommaKeyword_1_0_4 = (Keyword)cNameAlternatives_1_0.eContents().get(4);
		private final Keyword cNameColonKeyword_1_0_5 = (Keyword)cNameAlternatives_1_0.eContents().get(5);
		private final RuleCall cSINGLE_NLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// Any text that is not a Spec, Scenario, Step or Tag
		//Comment:
		//	name+=TextPart name+=(TextPart | "-" | "=" | "|" | "," | ":")* SINGLE_NL+;
		public ParserRule getRule() { return rule; }

		//name+=TextPart name+=(TextPart | "-" | "=" | "|" | "," | ":")* SINGLE_NL+
		public Group getGroup() { return cGroup; }

		//name+=TextPart
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//TextPart
		public RuleCall getNameTextPartParserRuleCall_0_0() { return cNameTextPartParserRuleCall_0_0; }

		//name+=(TextPart | "-" | "=" | "|" | "," | ":")*
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//TextPart | "-" | "=" | "|" | "," | ":"
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }

		//TextPart
		public RuleCall getNameTextPartParserRuleCall_1_0_0() { return cNameTextPartParserRuleCall_1_0_0; }

		//"-"
		public Keyword getNameHyphenMinusKeyword_1_0_1() { return cNameHyphenMinusKeyword_1_0_1; }

		//"="
		public Keyword getNameEqualsSignKeyword_1_0_2() { return cNameEqualsSignKeyword_1_0_2; }

		//"|"
		public Keyword getNameVerticalLineKeyword_1_0_3() { return cNameVerticalLineKeyword_1_0_3; }

		//","
		public Keyword getNameCommaKeyword_1_0_4() { return cNameCommaKeyword_1_0_4; }

		//":"
		public Keyword getNameColonKeyword_1_0_5() { return cNameColonKeyword_1_0_5; }

		//SINGLE_NL+
		public RuleCall getSINGLE_NLTerminalRuleCall_2() { return cSINGLE_NLTerminalRuleCall_2; }
	}

	public class TextPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWORDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSEPARATORSTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSTATIC_PARAMTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDYNAMIC_PARAMTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cWSTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//TextPart:
		//	WORD | SEPARATORS | STATIC_PARAM | DYNAMIC_PARAM | WS;
		public ParserRule getRule() { return rule; }

		//WORD | SEPARATORS | STATIC_PARAM | DYNAMIC_PARAM | WS
		public Alternatives getAlternatives() { return cAlternatives; }

		//WORD
		public RuleCall getWORDTerminalRuleCall_0() { return cWORDTerminalRuleCall_0; }

		//SEPARATORS
		public RuleCall getSEPARATORSTerminalRuleCall_1() { return cSEPARATORSTerminalRuleCall_1; }

		//STATIC_PARAM
		public RuleCall getSTATIC_PARAMTerminalRuleCall_2() { return cSTATIC_PARAMTerminalRuleCall_2; }

		//DYNAMIC_PARAM
		public RuleCall getDYNAMIC_PARAMTerminalRuleCall_3() { return cDYNAMIC_PARAMTerminalRuleCall_3; }

		//WS
		public RuleCall getWSTerminalRuleCall_4() { return cWSTerminalRuleCall_4; }
	}

	public class TableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Table");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cHeadingAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHeadingTableRowParserRuleCall_1_0 = (RuleCall)cHeadingAssignment_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cVerticalLineKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final RuleCall cTABLE_ROW_ENDTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final RuleCall cWSTerminalRuleCall_5_0 = (RuleCall)cGroup_5.eContents().get(0);
		private final Assignment cRowsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cRowsTableRowParserRuleCall_5_1_0 = (RuleCall)cRowsAssignment_5_1.eContents().get(0);
		
		//Table:
		//	WS* heading=TableRow WS* ("|" "-"+)+ TABLE_ROW_END (WS* rows+=TableRow)+;
		public ParserRule getRule() { return rule; }

		//WS* heading=TableRow WS* ("|" "-"+)+ TABLE_ROW_END (WS* rows+=TableRow)+
		public Group getGroup() { return cGroup; }

		//WS*
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//heading=TableRow
		public Assignment getHeadingAssignment_1() { return cHeadingAssignment_1; }

		//TableRow
		public RuleCall getHeadingTableRowParserRuleCall_1_0() { return cHeadingTableRowParserRuleCall_1_0; }

		//WS*
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }

		//("|" "-"+)+
		public Group getGroup_3() { return cGroup_3; }

		//"|"
		public Keyword getVerticalLineKeyword_3_0() { return cVerticalLineKeyword_3_0; }

		//"-"+
		public Keyword getHyphenMinusKeyword_3_1() { return cHyphenMinusKeyword_3_1; }

		//TABLE_ROW_END
		public RuleCall getTABLE_ROW_ENDTerminalRuleCall_4() { return cTABLE_ROW_ENDTerminalRuleCall_4; }

		//(WS* rows+=TableRow)+
		public Group getGroup_5() { return cGroup_5; }

		//WS*
		public RuleCall getWSTerminalRuleCall_5_0() { return cWSTerminalRuleCall_5_0; }

		//rows+=TableRow
		public Assignment getRowsAssignment_5_1() { return cRowsAssignment_5_1; }

		//TableRow
		public RuleCall getRowsTableRowParserRuleCall_5_1_0() { return cRowsTableRowParserRuleCall_5_1_0; }
	}

	public class TableRowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TableRow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCellsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCellsTableCellParserRuleCall_0_0 = (RuleCall)cCellsAssignment_0.eContents().get(0);
		private final RuleCall cTABLE_ROW_ENDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//TableRow:
		//	cells+=TableCell+ TABLE_ROW_END;
		public ParserRule getRule() { return rule; }

		//cells+=TableCell+ TABLE_ROW_END
		public Group getGroup() { return cGroup; }

		//cells+=TableCell+
		public Assignment getCellsAssignment_0() { return cCellsAssignment_0; }

		//TableCell
		public RuleCall getCellsTableCellParserRuleCall_0_0() { return cCellsTableCellParserRuleCall_0_0; }

		//TABLE_ROW_END
		public RuleCall getTABLE_ROW_ENDTerminalRuleCall_1() { return cTABLE_ROW_ENDTerminalRuleCall_1; }
	}

	public class TableCellElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TableCell");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerticalLineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameWORDTerminalRuleCall_1_0_0 = (RuleCall)cNameAlternatives_1_0.eContents().get(0);
		private final RuleCall cNameSEPARATORSTerminalRuleCall_1_0_1 = (RuleCall)cNameAlternatives_1_0.eContents().get(1);
		private final RuleCall cNameWSTerminalRuleCall_1_0_2 = (RuleCall)cNameAlternatives_1_0.eContents().get(2);
		
		//TableCell:
		//	"|" name+=(WORD | SEPARATORS | WS)+;
		public ParserRule getRule() { return rule; }

		//"|" name+=(WORD | SEPARATORS | WS)+
		public Group getGroup() { return cGroup; }

		//"|"
		public Keyword getVerticalLineKeyword_0() { return cVerticalLineKeyword_0; }

		//name+=(WORD | SEPARATORS | WS)+
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//WORD | SEPARATORS | WS
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }

		//WORD
		public RuleCall getNameWORDTerminalRuleCall_1_0_0() { return cNameWORDTerminalRuleCall_1_0_0; }

		//SEPARATORS
		public RuleCall getNameSEPARATORSTerminalRuleCall_1_0_1() { return cNameSEPARATORSTerminalRuleCall_1_0_1; }

		//WS
		public RuleCall getNameWSTerminalRuleCall_1_0_2() { return cNameWSTerminalRuleCall_1_0_2; }
	}
	
	
	private ModelElements pModel;
	private ElementElements pElement;
	private SpecElements pSpec;
	private ScenarioElements pScenario;
	private StepElements pStep;
	private StepDefinitionElements pStepDefinition;
	private StaticParamElements pStaticParam;
	private DynamicParamElements pDynamicParam;
	private TagsElements pTags;
	private CommentElements pComment;
	private TextPartElements pTextPart;
	private TableElements pTable;
	private TableRowElements pTableRow;
	private TableCellElements pTableCell;
	private TerminalRule tSINGLE_NL;
	private TerminalRule tWORD;
	private TerminalRule tNUMBER;
	private TerminalRule tSTATIC_PARAM;
	private TerminalRule tDYNAMIC_PARAM;
	private TerminalRule tTABLE_ROW_END;
	private TerminalRule tWS;
	private TerminalRule tSEPARATORS;
	
	private final Grammar grammar;

	@Inject
	public SpecGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("io.getgauge.Spec".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	/// *
	// * TODO
	// * - Errors if last line is not a newline
	// * / Model:
	//	{Model} SINGLE_NL* definitions+=Element*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Element:
	//	Spec | Scenario | Step | Comment | Tags;
	public ElementElements getElementAccess() {
		return (pElement != null) ? pElement : (pElement = new ElementElements());
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}

	//// Two formats of Markdown H1
	//Spec:
	//	"# " name+=TextPart+ SINGLE_NL+ | name+=TextPart+ SINGLE_NL "="+ SINGLE_NL+;
	public SpecElements getSpecAccess() {
		return (pSpec != null) ? pSpec : (pSpec = new SpecElements());
	}
	
	public ParserRule getSpecRule() {
		return getSpecAccess().getRule();
	}

	//// Two formats of Markdown H2
	//Scenario:
	//	"## " name+=TextPart+ SINGLE_NL+ | name+=TextPart+ SINGLE_NL "-"+ SINGLE_NL+;
	public ScenarioElements getScenarioAccess() {
		return (pScenario != null) ? pScenario : (pScenario = new ScenarioElements());
	}
	
	public ParserRule getScenarioRule() {
		return getScenarioAccess().getRule();
	}

	//// Markdown Unordered List - can contain parameters, Static (i.e. "foo") or Dynamic (i.e. <bar>)
	//// Can also optionally have a Table associated
	//Step:
	//	{Step} definition=StepDefinition SINGLE_NL (SINGLE_NL* table=Table)? SINGLE_NL*;
	public StepElements getStepAccess() {
		return (pStep != null) ? pStep : (pStep = new StepElements());
	}
	
	public ParserRule getStepRule() {
		return getStepAccess().getRule();
	}

	//StepDefinition:
	//	{StepDefinition} "* " ((staticParams+=StaticParam | dynamicParams+=DynamicParam | text+=(WORD | "-" | "=" | WS |
	//	NUMBER)) separators+=SEPARATORS*)+;
	public StepDefinitionElements getStepDefinitionAccess() {
		return (pStepDefinition != null) ? pStepDefinition : (pStepDefinition = new StepDefinitionElements());
	}
	
	public ParserRule getStepDefinitionRule() {
		return getStepDefinitionAccess().getRule();
	}

	//StaticParam:
	//	name=STATIC_PARAM;
	public StaticParamElements getStaticParamAccess() {
		return (pStaticParam != null) ? pStaticParam : (pStaticParam = new StaticParamElements());
	}
	
	public ParserRule getStaticParamRule() {
		return getStaticParamAccess().getRule();
	}

	//DynamicParam:
	//	name=DYNAMIC_PARAM;
	public DynamicParamElements getDynamicParamAccess() {
		return (pDynamicParam != null) ? pDynamicParam : (pDynamicParam = new DynamicParamElements());
	}
	
	public ParserRule getDynamicParamRule() {
		return getDynamicParamAccess().getRule();
	}

	//Tags:
	//	{Tags} "tags" WS* ":" (WORD | WS | ",")+ SINGLE_NL+;
	public TagsElements getTagsAccess() {
		return (pTags != null) ? pTags : (pTags = new TagsElements());
	}
	
	public ParserRule getTagsRule() {
		return getTagsAccess().getRule();
	}

	//// Any text that is not a Spec, Scenario, Step or Tag
	//Comment:
	//	name+=TextPart name+=(TextPart | "-" | "=" | "|" | "," | ":")* SINGLE_NL+;
	public CommentElements getCommentAccess() {
		return (pComment != null) ? pComment : (pComment = new CommentElements());
	}
	
	public ParserRule getCommentRule() {
		return getCommentAccess().getRule();
	}

	//TextPart:
	//	WORD | SEPARATORS | STATIC_PARAM | DYNAMIC_PARAM | WS;
	public TextPartElements getTextPartAccess() {
		return (pTextPart != null) ? pTextPart : (pTextPart = new TextPartElements());
	}
	
	public ParserRule getTextPartRule() {
		return getTextPartAccess().getRule();
	}

	//Table:
	//	WS* heading=TableRow WS* ("|" "-"+)+ TABLE_ROW_END (WS* rows+=TableRow)+;
	public TableElements getTableAccess() {
		return (pTable != null) ? pTable : (pTable = new TableElements());
	}
	
	public ParserRule getTableRule() {
		return getTableAccess().getRule();
	}

	//TableRow:
	//	cells+=TableCell+ TABLE_ROW_END;
	public TableRowElements getTableRowAccess() {
		return (pTableRow != null) ? pTableRow : (pTableRow = new TableRowElements());
	}
	
	public ParserRule getTableRowRule() {
		return getTableRowAccess().getRule();
	}

	//TableCell:
	//	"|" name+=(WORD | SEPARATORS | WS)+;
	public TableCellElements getTableCellAccess() {
		return (pTableCell != null) ? pTableCell : (pTableCell = new TableCellElements());
	}
	
	public ParserRule getTableCellRule() {
		return getTableCellAccess().getRule();
	}

	//terminal SINGLE_NL:
	//	"\r"? "\n";
	public TerminalRule getSINGLE_NLRule() {
		return (tSINGLE_NL != null) ? tSINGLE_NL : (tSINGLE_NL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SINGLE_NL"));
	} 

	//terminal WORD:
	//	("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getWORDRule() {
		return (tWORD != null) ? tWORD : (tWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WORD"));
	} 

	//terminal NUMBER:
	//	"0".."9"+;
	public TerminalRule getNUMBERRule() {
		return (tNUMBER != null) ? tNUMBER : (tNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NUMBER"));
	} 

	//terminal STATIC_PARAM:
	//	"\""->"\"";
	public TerminalRule getSTATIC_PARAMRule() {
		return (tSTATIC_PARAM != null) ? tSTATIC_PARAM : (tSTATIC_PARAM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STATIC_PARAM"));
	} 

	//terminal DYNAMIC_PARAM:
	//	"<"->">";
	public TerminalRule getDYNAMIC_PARAMRule() {
		return (tDYNAMIC_PARAM != null) ? tDYNAMIC_PARAM : (tDYNAMIC_PARAM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DYNAMIC_PARAM"));
	} 

	//terminal TABLE_ROW_END:
	//	"|" (SINGLE_NL | EOF);
	public TerminalRule getTABLE_ROW_ENDRule() {
		return (tTABLE_ROW_END != null) ? tTABLE_ROW_END : (tTABLE_ROW_END = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TABLE_ROW_END"));
	} 

	//terminal WS:
	//	" " | "\t";
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal SEPARATORS:
	//	!("\r" | "\n" | "a".."z" | "A".."Z" | "0".."9" | "_" | " " | "\t");
	public TerminalRule getSEPARATORSRule() {
		return (tSEPARATORS != null) ? tSEPARATORS : (tSEPARATORS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SEPARATORS"));
	} 
}
