/*
* generated by Xtext
*/
package io.getgauge.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SpecGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Spec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignSpaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextIDTerminalRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		private final Assignment cScenariosAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cScenariosScenarioParserRuleCall_2_0 = (RuleCall)cScenariosAssignment_2.eContents().get(0);
		private final Assignment cStepsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStepsStepParserRuleCall_3_0 = (RuleCall)cStepsAssignment_3.eContents().get(0);
		
		//Spec:
		//	"# " text+=ID+ scenarios+=Scenario* steps+=Step*;
		public ParserRule getRule() { return rule; }

		//"# " text+=ID+ scenarios+=Scenario* steps+=Step*
		public Group getGroup() { return cGroup; }

		//"# "
		public Keyword getNumberSignSpaceKeyword_0() { return cNumberSignSpaceKeyword_0; }

		//text+=ID+
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }

		//ID
		public RuleCall getTextIDTerminalRuleCall_1_0() { return cTextIDTerminalRuleCall_1_0; }

		//scenarios+=Scenario*
		public Assignment getScenariosAssignment_2() { return cScenariosAssignment_2; }

		//Scenario
		public RuleCall getScenariosScenarioParserRuleCall_2_0() { return cScenariosScenarioParserRuleCall_2_0; }

		//steps+=Step*
		public Assignment getStepsAssignment_3() { return cStepsAssignment_3; }

		//Step
		public RuleCall getStepsStepParserRuleCall_3_0() { return cStepsStepParserRuleCall_3_0; }
	}

	public class ScenarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Scenario");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignNumberSignSpaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextIDTerminalRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		
		//Scenario:
		//	"## " text+=ID+;
		public ParserRule getRule() { return rule; }

		//"## " text+=ID+
		public Group getGroup() { return cGroup; }

		//"## "
		public Keyword getNumberSignNumberSignSpaceKeyword_0() { return cNumberSignNumberSignSpaceKeyword_0; }

		//text+=ID+
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }

		//ID
		public RuleCall getTextIDTerminalRuleCall_1_0() { return cTextIDTerminalRuleCall_1_0; }
	}

	public class StepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Step");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsteriskSpaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextIDTerminalRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		
		//Step:
		//	"* " text+=ID+;
		public ParserRule getRule() { return rule; }

		//"* " text+=ID+
		public Group getGroup() { return cGroup; }

		//"* "
		public Keyword getAsteriskSpaceKeyword_0() { return cAsteriskSpaceKeyword_0; }

		//text+=ID+
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }

		//ID
		public RuleCall getTextIDTerminalRuleCall_1_0() { return cTextIDTerminalRuleCall_1_0; }
	}
	
	
	private final SpecElements pSpec;
	private final ScenarioElements pScenario;
	private final StepElements pStep;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SpecGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSpec = new SpecElements();
		this.pScenario = new ScenarioElements();
		this.pStep = new StepElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("io.getgauge.Spec".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Spec:
	//	"# " text+=ID+ scenarios+=Scenario* steps+=Step*;
	public SpecElements getSpecAccess() {
		return pSpec;
	}
	
	public ParserRule getSpecRule() {
		return getSpecAccess().getRule();
	}

	//Scenario:
	//	"## " text+=ID+;
	public ScenarioElements getScenarioAccess() {
		return pScenario;
	}
	
	public ParserRule getScenarioRule() {
		return getScenarioAccess().getRule();
	}

	//Step:
	//	"* " text+=ID+;
	public StepElements getStepAccess() {
		return pStep;
	}
	
	public ParserRule getStepRule() {
		return getStepAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
