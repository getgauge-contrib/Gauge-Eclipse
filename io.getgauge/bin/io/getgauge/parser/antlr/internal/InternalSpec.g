/*
* generated by Xtext
*/
grammar InternalSpec;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package io.getgauge.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package io.getgauge.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import io.getgauge.services.SpecGrammarAccess;

}

@parser::members {

 	private SpecGrammarAccess grammarAccess;
 	
    public InternalSpecParser(TokenStream input, SpecGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Spec";	
   	}
   	
   	@Override
   	protected SpecGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleSpec
entryRuleSpec returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSpecRule()); }
	 iv_ruleSpec=ruleSpec 
	 { $current=$iv_ruleSpec.current; } 
	 EOF 
;

// Rule Spec
ruleSpec returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='# ' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSpecAccess().getNumberSignSpaceKeyword_0());
    }
(
(
		lv_text_1_0=RULE_ID
		{
			newLeafNode(lv_text_1_0, grammarAccess.getSpecAccess().getTextIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSpecRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"text",
        		lv_text_1_0, 
        		"ID");
	    }

)
)+(
(
		{ 
	        newCompositeNode(grammarAccess.getSpecAccess().getScenariosScenarioParserRuleCall_2_0()); 
	    }
		lv_scenarios_2_0=ruleScenario		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecRule());
	        }
       		add(
       			$current, 
       			"scenarios",
        		lv_scenarios_2_0, 
        		"Scenario");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getSpecAccess().getStepsStepParserRuleCall_3_0()); 
	    }
		lv_steps_3_0=ruleStep		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecRule());
	        }
       		add(
       			$current, 
       			"steps",
        		lv_steps_3_0, 
        		"Step");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleScenario
entryRuleScenario returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getScenarioRule()); }
	 iv_ruleScenario=ruleScenario 
	 { $current=$iv_ruleScenario.current; } 
	 EOF 
;

// Rule Scenario
ruleScenario returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='## ' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getScenarioAccess().getNumberSignNumberSignSpaceKeyword_0());
    }
(
(
		lv_text_1_0=RULE_ID
		{
			newLeafNode(lv_text_1_0, grammarAccess.getScenarioAccess().getTextIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScenarioRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"text",
        		lv_text_1_0, 
        		"ID");
	    }

)
)+)
;





// Entry rule entryRuleStep
entryRuleStep returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStepRule()); }
	 iv_ruleStep=ruleStep 
	 { $current=$iv_ruleStep.current; } 
	 EOF 
;

// Rule Step
ruleStep returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='* ' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStepAccess().getAsteriskSpaceKeyword_0());
    }
(
(
		lv_text_1_0=RULE_ID
		{
			newLeafNode(lv_text_1_0, grammarAccess.getStepAccess().getTextIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStepRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"text",
        		lv_text_1_0, 
        		"ID");
	    }

)
)+)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


