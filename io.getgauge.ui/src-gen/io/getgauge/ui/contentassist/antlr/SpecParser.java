/*
* generated by Xtext
*/
package io.getgauge.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import io.getgauge.services.SpecGrammarAccess;

public class SpecParser extends AbstractContentAssistParser {
	
	@Inject
	private SpecGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected io.getgauge.ui.contentassist.antlr.internal.InternalSpecParser createParser() {
		io.getgauge.ui.contentassist.antlr.internal.InternalSpecParser result = new io.getgauge.ui.contentassist.antlr.internal.InternalSpecParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getAbstractEntityAccess().getAlternatives(), "rule__AbstractEntity__Alternatives");
					put(grammarAccess.getSpecAccess().getAlternatives(), "rule__Spec__Alternatives");
					put(grammarAccess.getSpecAccess().getNameAlternatives_0_1_0(), "rule__Spec__NameAlternatives_0_1_0");
					put(grammarAccess.getSpecAccess().getNameAlternatives_1_0_0(), "rule__Spec__NameAlternatives_1_0_0");
					put(grammarAccess.getScenarioAccess().getAlternatives(), "rule__Scenario__Alternatives");
					put(grammarAccess.getScenarioAccess().getNameAlternatives_0_1_0(), "rule__Scenario__NameAlternatives_0_1_0");
					put(grammarAccess.getScenarioAccess().getNameAlternatives_1_0_0(), "rule__Scenario__NameAlternatives_1_0_0");
					put(grammarAccess.getStepAccess().getAlternatives_2_0(), "rule__Step__Alternatives_2_0");
					put(grammarAccess.getCommentAccess().getTextAlternatives_0_0(), "rule__Comment__TextAlternatives_0_0");
					put(grammarAccess.getCommentAccess().getTextAlternatives_1_0(), "rule__Comment__TextAlternatives_1_0");
					put(grammarAccess.getSpecAccess().getGroup_0(), "rule__Spec__Group_0__0");
					put(grammarAccess.getSpecAccess().getGroup_1(), "rule__Spec__Group_1__0");
					put(grammarAccess.getSpecAccess().getGroup_1_2(), "rule__Spec__Group_1_2__0");
					put(grammarAccess.getScenarioAccess().getGroup_0(), "rule__Scenario__Group_0__0");
					put(grammarAccess.getScenarioAccess().getGroup_1(), "rule__Scenario__Group_1__0");
					put(grammarAccess.getScenarioAccess().getGroup_1_2(), "rule__Scenario__Group_1_2__0");
					put(grammarAccess.getStepAccess().getGroup(), "rule__Step__Group__0");
					put(grammarAccess.getStepAccess().getGroup_2(), "rule__Step__Group_2__0");
					put(grammarAccess.getCommentAccess().getGroup(), "rule__Comment__Group__0");
					put(grammarAccess.getModelAccess().getDefinitionsAssignment(), "rule__Model__DefinitionsAssignment");
					put(grammarAccess.getSpecAccess().getNameAssignment_0_1(), "rule__Spec__NameAssignment_0_1");
					put(grammarAccess.getSpecAccess().getNameAssignment_1_0(), "rule__Spec__NameAssignment_1_0");
					put(grammarAccess.getScenarioAccess().getNameAssignment_0_1(), "rule__Scenario__NameAssignment_0_1");
					put(grammarAccess.getScenarioAccess().getNameAssignment_1_0(), "rule__Scenario__NameAssignment_1_0");
					put(grammarAccess.getStepAccess().getStaticParamsAssignment_2_0_0(), "rule__Step__StaticParamsAssignment_2_0_0");
					put(grammarAccess.getStepAccess().getDynamicParamsAssignment_2_0_1(), "rule__Step__DynamicParamsAssignment_2_0_1");
					put(grammarAccess.getStaticParamAccess().getNameAssignment(), "rule__StaticParam__NameAssignment");
					put(grammarAccess.getDynamicParamAccess().getNameAssignment(), "rule__DynamicParam__NameAssignment");
					put(grammarAccess.getCommentAccess().getTextAssignment_0(), "rule__Comment__TextAssignment_0");
					put(grammarAccess.getCommentAccess().getTextAssignment_1(), "rule__Comment__TextAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			io.getgauge.ui.contentassist.antlr.internal.InternalSpecParser typedParser = (io.getgauge.ui.contentassist.antlr.internal.InternalSpecParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] {  };
	}
	
	public SpecGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(SpecGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
