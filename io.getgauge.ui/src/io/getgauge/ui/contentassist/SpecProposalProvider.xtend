/*
 * generated by Xtext
 */
package io.getgauge.ui.contentassist

import com.thoughtworks.gauge.eclipse.GaugePlugin
import java.util.List
import org.eclipse.core.resources.ResourcesPlugin
import org.eclipse.core.runtime.Path
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.Assignment
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor

/**
 * see http://www.eclipse.org/Xtext/documentation.html#contentAssist on how to customize content assistant
 */
class SpecProposalProvider extends AbstractSpecProposalProvider {

	override completeModel_Definitions(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		super.completeModel_Definitions(model, assignment, context, acceptor)
		val steps = getStepList(context);
		
		for(String step : steps) {
			acceptor.accept(createCompletionProposal("* ".concat(step), context));
		}
	}

	def private List<String> getStepList(ContentAssistContext context) {
		val platformString = context.getResource().getURI().toPlatformString(true);
		val myFile = ResourcesPlugin.getWorkspace().getRoot().getFile(new Path(platformString));
		val gaugeWorkspace = GaugePlugin.getDefault().getGaugeWorkspace();
		val steps = gaugeWorkspace.getSteps(myFile.getProject());
		return steps;
	}
}
