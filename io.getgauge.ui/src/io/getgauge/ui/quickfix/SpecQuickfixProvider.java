/*
* generated by Xtext
*/
package io.getgauge.ui.quickfix;

import io.getgauge.ProjectUtil;
import io.getgauge.StepUtil;
import io.getgauge.spec.Step;
import io.getgauge.validation.SpecValidator;

import org.eclipse.core.resources.IProject;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.jdt.core.ICompilationUnit;
import org.eclipse.jdt.core.IMethod;
import org.eclipse.jdt.core.IType;
import org.eclipse.jdt.core.JavaModelException;
import org.eclipse.jdt.core.search.SearchEngine;
import org.eclipse.jdt.ui.IJavaElementSearchConstants;
import org.eclipse.jdt.ui.JavaUI;
import org.eclipse.jface.dialogs.IDialogConstants;
import org.eclipse.jface.dialogs.ProgressMonitorDialog;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.dialogs.SelectionDialog;
import org.eclipse.ui.statushandlers.StatusManager;
import org.eclipse.xtext.ui.editor.model.edit.IModificationContext;
import org.eclipse.xtext.ui.editor.model.edit.ISemanticModification;
import org.eclipse.xtext.ui.editor.quickfix.Fix;
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor;
import org.eclipse.xtext.validation.Issue;

import com.thoughtworks.gauge.eclipse.GaugePlugin;
import com.thoughtworks.gauge.eclipse.model.StepData;
import com.thoughtworks.gauge.eclipse.project.GaugeWorkspace;
import com.thoughtworks.gauge.eclipse.util.GaugeUtil;

/**
 * Custom quickfixes.
 *
 * see http://www.eclipse.org/Xtext/documentation.html#quickfixes
 */
public class SpecQuickfixProvider extends org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider {

	@Fix(SpecValidator.STEP_IMPLEMTENTATION_NOT_FOUND)
	public void capitalizeName(final Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, "Implement Step", "Add code step implementation in a Java class", null, new ISemanticModification() {
			@Override
			public void apply(EObject element, IModificationContext context)
					throws Exception {
				try {
					
					Step step = (Step) element;
					Object type=getTargetType();
					
					if (type==null || !(type instanceof IType)) {
						GaugeUtil.displayErrorMessage("Selected type is not SourceType", StatusManager.BLOCK, null);
						return;
					}
					IType sourceType = (IType) type;
					ICompilationUnit unit = sourceType.getCompilationUnit();
					IProgressMonitor monitor = new NullProgressMonitor();
					String methodText = getMethodText(element, step);

					IMethod method = unit.getTypes()[0].createMethod(methodText, null, false, monitor);
					JavaUI.openInEditor(method);
				} catch (JavaModelException e) {
					GaugeUtil.displayErrorMessage("Unable to implement step", StatusManager.SHOW, e);
					e.printStackTrace();
				}
			}

			private String getMethodText(EObject element, Step step) {
				IProject project = ProjectUtil.getProject(element);
				GaugeWorkspace gaugeWorkspace = GaugePlugin.getDefault().getGaugeWorkspace();
				
				String stepText = StepUtil.getStepText(step);
				StepData stepData = gaugeWorkspace.getStepData(project, stepText);
				String paramString = buildParameterString(step, stepData);
				
				return "@Step(\"" + stepData.getStepAnnotationText() + "\")\n"
				+ "public void methodStub(" + paramString + ") {\n"
				+ "}\n";
			}
			
			private String buildParameterString(Step step, StepData stepData) {
				boolean hasTable = step.getTable()!=null;
				
				int stringParams = hasTable ? stepData.getParameterCount()-1 : stepData.getParameterCount();
				String paramString = "";
				for (int i = 0; i < stringParams; i++) {
					paramString=paramString + ", String param" + i;
				}
				if(hasTable) {
					paramString=paramString + "Table table";
				}
				return paramString.replaceAll("^,\\s", "");
			}
			
			private Object getTargetType() throws JavaModelException {
				Shell shell=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
				SelectionDialog dialog = JavaUI.createTypeDialog(shell,new ProgressMonitorDialog(shell),SearchEngine.createWorkspaceScope(),
						IJavaElementSearchConstants.CONSIDER_CLASSES, false);
				dialog.setTitle("Select type");
				dialog.setMessage("Select type to implement Step");
				if(dialog.open()==IDialogConstants.CANCEL_ID)
					return null;
				return dialog.getResult()[0];
			}
		});
	}

}
