/*
* generated by Xtext
*/
grammar InternalSpec;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package io.getgauge.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package io.getgauge.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import io.getgauge.services.SpecGrammarAccess;

}

@parser::members {
 
 	private SpecGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(SpecGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getDefinitionsAssignment()); }
(rule__Model__DefinitionsAssignment)*
{ after(grammarAccess.getModelAccess().getDefinitionsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAbstractEntity
entryRuleAbstractEntity 
:
{ before(grammarAccess.getAbstractEntityRule()); }
	 ruleAbstractEntity
{ after(grammarAccess.getAbstractEntityRule()); } 
	 EOF 
;

// Rule AbstractEntity
ruleAbstractEntity
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAbstractEntityAccess().getAlternatives()); }
(rule__AbstractEntity__Alternatives)
{ after(grammarAccess.getAbstractEntityAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSpec
entryRuleSpec 
:
{ before(grammarAccess.getSpecRule()); }
	 ruleSpec
{ after(grammarAccess.getSpecRule()); } 
	 EOF 
;

// Rule Spec
ruleSpec
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSpecAccess().getGroup()); }
(rule__Spec__Group__0)
{ after(grammarAccess.getSpecAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleScenario
entryRuleScenario 
:
{ before(grammarAccess.getScenarioRule()); }
	 ruleScenario
{ after(grammarAccess.getScenarioRule()); } 
	 EOF 
;

// Rule Scenario
ruleScenario
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getScenarioAccess().getGroup()); }
(rule__Scenario__Group__0)
{ after(grammarAccess.getScenarioAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStep
entryRuleStep 
:
{ before(grammarAccess.getStepRule()); }
	 ruleStep
{ after(grammarAccess.getStepRule()); } 
	 EOF 
;

// Rule Step
ruleStep
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStepAccess().getGroup()); }
(rule__Step__Group__0)
{ after(grammarAccess.getStepAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComment
entryRuleComment 
:
{ before(grammarAccess.getCommentRule()); }
	 ruleComment
{ after(grammarAccess.getCommentRule()); } 
	 EOF 
;

// Rule Comment
ruleComment
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCommentAccess().getTextAssignment()); }
(rule__Comment__TextAssignment)
{ after(grammarAccess.getCommentAccess().getTextAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBlankLine
entryRuleBlankLine 
:
{ before(grammarAccess.getBlankLineRule()); }
	 ruleBlankLine
{ after(grammarAccess.getBlankLineRule()); } 
	 EOF 
;

// Rule BlankLine
ruleBlankLine
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBlankLineAccess().getTextAssignment()); }
(rule__BlankLine__TextAssignment)
{ after(grammarAccess.getBlankLineAccess().getTextAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__AbstractEntity__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractEntityAccess().getSpecParserRuleCall_0()); }
	ruleSpec
{ after(grammarAccess.getAbstractEntityAccess().getSpecParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAbstractEntityAccess().getScenarioParserRuleCall_1()); }
	ruleScenario
{ after(grammarAccess.getAbstractEntityAccess().getScenarioParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getAbstractEntityAccess().getStepParserRuleCall_2()); }
	ruleStep
{ after(grammarAccess.getAbstractEntityAccess().getStepParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getAbstractEntityAccess().getCommentParserRuleCall_3()); }
	ruleComment
{ after(grammarAccess.getAbstractEntityAccess().getCommentParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getAbstractEntityAccess().getBlankLineParserRuleCall_4()); }
	ruleBlankLine
{ after(grammarAccess.getAbstractEntityAccess().getBlankLineParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BlankLine__TextAlternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlankLineAccess().getTextSINGLE_NLTerminalRuleCall_0_0()); }
	RULE_SINGLE_NL
{ after(grammarAccess.getBlankLineAccess().getTextSINGLE_NLTerminalRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getBlankLineAccess().getTextMULTI_NLTerminalRuleCall_0_1()); }
	RULE_MULTI_NL
{ after(grammarAccess.getBlankLineAccess().getTextMULTI_NLTerminalRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Spec__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Spec__Group__0__Impl
	rule__Spec__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Spec__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpecAccess().getNumberSignSpaceKeyword_0()); }

	'# ' 

{ after(grammarAccess.getSpecAccess().getNumberSignSpaceKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Spec__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Spec__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Spec__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpecAccess().getNameAssignment_1()); }
(rule__Spec__NameAssignment_1)
{ after(grammarAccess.getSpecAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Scenario__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Scenario__Group__0__Impl
	rule__Scenario__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Scenario__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScenarioAccess().getNumberSignNumberSignSpaceKeyword_0()); }

	'## ' 

{ after(grammarAccess.getScenarioAccess().getNumberSignNumberSignSpaceKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Scenario__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Scenario__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Scenario__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScenarioAccess().getNameAssignment_1()); }
(rule__Scenario__NameAssignment_1)
{ after(grammarAccess.getScenarioAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Step__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Step__Group__0__Impl
	rule__Step__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStepAccess().getAsteriskSpaceKeyword_0()); }

	'* ' 

{ after(grammarAccess.getStepAccess().getAsteriskSpaceKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Step__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Step__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStepAccess().getNameAssignment_1()); }
(rule__Step__NameAssignment_1)
{ after(grammarAccess.getStepAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Model__DefinitionsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getDefinitionsAbstractEntityParserRuleCall_0()); }
	ruleAbstractEntity{ after(grammarAccess.getModelAccess().getDefinitionsAbstractEntityParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Spec__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpecAccess().getNameLINE_TEXTTerminalRuleCall_1_0()); }
	RULE_LINE_TEXT{ after(grammarAccess.getSpecAccess().getNameLINE_TEXTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Scenario__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScenarioAccess().getNameLINE_TEXTTerminalRuleCall_1_0()); }
	RULE_LINE_TEXT{ after(grammarAccess.getScenarioAccess().getNameLINE_TEXTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Step__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStepAccess().getNameLINE_TEXTTerminalRuleCall_1_0()); }
	RULE_LINE_TEXT{ after(grammarAccess.getStepAccess().getNameLINE_TEXTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comment__TextAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommentAccess().getTextLINE_TEXTTerminalRuleCall_0()); }
	RULE_LINE_TEXT{ after(grammarAccess.getCommentAccess().getTextLINE_TEXTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BlankLine__TextAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlankLineAccess().getTextAlternatives_0()); }
(rule__BlankLine__TextAlternatives_0)
{ after(grammarAccess.getBlankLineAccess().getTextAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_MULTI_NL : RULE_SINGLE_NL RULE_SINGLE_NL+;

RULE_SINGLE_NL : '\r'? '\n';

RULE_LINE_TEXT : ~(('#'|'*')) ( options {greedy=false;} : . )*RULE_SINGLE_NL;


