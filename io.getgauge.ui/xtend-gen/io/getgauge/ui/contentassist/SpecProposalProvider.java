/**
 * generated by Xtext
 */
package io.getgauge.ui.contentassist;

import com.thoughtworks.gauge.eclipse.GaugePlugin;
import com.thoughtworks.gauge.eclipse.project.GaugeWorkspace;
import io.getgauge.ui.contentassist.AbstractSpecProposalProvider;
import java.util.List;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IWorkspace;
import org.eclipse.core.resources.IWorkspaceRoot;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.Path;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.text.contentassist.ICompletionProposal;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;

/**
 * see http://www.eclipse.org/Xtext/documentation.html#contentAssist on how to customize content assistant
 */
@SuppressWarnings("all")
public class SpecProposalProvider extends AbstractSpecProposalProvider {
  public void completeModel_Definitions(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.completeModel_Definitions(model, assignment, context, acceptor);
    final List<String> steps = this.getStepList(context);
    for (final String step : steps) {
      String _concat = "* ".concat(step);
      ICompletionProposal _createCompletionProposal = this.createCompletionProposal(_concat, context);
      acceptor.accept(_createCompletionProposal);
    }
  }
  
  private List<String> getStepList(final ContentAssistContext context) {
    XtextResource _resource = context.getResource();
    URI _uRI = _resource.getURI();
    final String platformString = _uRI.toPlatformString(true);
    IWorkspace _workspace = ResourcesPlugin.getWorkspace();
    IWorkspaceRoot _root = _workspace.getRoot();
    Path _path = new Path(platformString);
    final IFile myFile = _root.getFile(_path);
    GaugePlugin _default = GaugePlugin.getDefault();
    final GaugeWorkspace gaugeWorkspace = _default.getGaugeWorkspace();
    IProject _project = myFile.getProject();
    final List<String> steps = gaugeWorkspace.getSteps(_project);
    return steps;
  }
}
