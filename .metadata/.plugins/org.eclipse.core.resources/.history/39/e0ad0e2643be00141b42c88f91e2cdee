package io.getgauge.ui;

//import io.getgauge.spec.*;
//import static io.getgauge.ui.SpecHighlightingConfiguration.*;
//import org.eclipse.xtext.impl.TerminalRuleImpl;
//import org.eclipse.xtext.nodemodel.BidiIterator;
//import org.eclipse.xtext.nodemodel.BidiTreeIterator;
//import org.eclipse.xtext.nodemodel.INode;
//import org.eclipse.xtext.nodemodel.impl.CompositeNodeWithSemanticElement;
//import org.eclipse.xtext.nodemodel.impl.HiddenLeafNode;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.BidiTreeIterable;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.ui.editor.syntaxcoloring.IHighlightedPositionAcceptor;
import org.eclipse.xtext.ui.editor.syntaxcoloring.ISemanticHighlightingCalculator;

public class SpecHighlightingCalculator implements ISemanticHighlightingCalculator {

	@Override
	public void provideHighlightingFor(XtextResource resource,
			IHighlightedPositionAcceptor acceptor) {
		BidiTreeIterable<INode> allNodes=resource.getParseResult().getRootNode().getAsTreeIterable();
		for (  INode node : allNodes) {
			EObject gElem=node.getGrammarElement();
			if (gElem instanceof RuleCall) {
				highlight(node,acceptor);
			}
			else if (gElem instanceof Keyword) {
				highlight(node,acceptor);
			}
		}
	}
}
