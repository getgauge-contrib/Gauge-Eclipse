package io.getgauge.ui;

import java.util.Dictionary;

import io.getgauge.spec.Scenario;
import io.getgauge.spec.Spec;
import io.getgauge.spec.Step;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.BidiTreeIterator;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.nodemodel.impl.CompositeNodeWithSemanticElement;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.ui.editor.syntaxcoloring.IHighlightedPositionAcceptor;
import org.eclipse.xtext.ui.editor.syntaxcoloring.ISemanticHighlightingCalculator;

public class SpecHighlightingCalculator implements ISemanticHighlightingCalculator {

	@Override
	public void provideHighlightingFor(XtextResource resource,
			IHighlightedPositionAcceptor acceptor) {

		INode root = resource.getParseResult().getRootNode();
        BidiTreeIterator<INode> it = root.getAsTreeIterable().iterator();
        while( it.hasNext() )
        {
        	INode node = it.next();
        	if( node instanceof CompositeNodeWithSemanticElement)
        	{
        		if(node.getSemanticElement() instanceof Spec )
        	 	{
        			acceptor.addPosition(node.getOffset(), node.getLength(), SpecHighlightingConfiguration.SPEC);
        	 	}
        		else if( node.getSemanticElement() instanceof Scenario )
        		{
        			acceptor.addPosition(node.getOffset(), node.getLength(), SpecHighlightingConfiguration.SCENARIO);
	       		}
        		else if( node.getSemanticElement() instanceof Step )
        		{
        			acceptor.addPosition(node.getOffset(), node.getLength(), SpecHighlightingConfiguration.STEP);
	       		}
        	}
        }
//        for(INode node : root.getAsTreeIterable()) {
//            EObject grammarElement = node.getGrammarElement();
//            System.out.println(grammarElement.getClass());
//            System.out.println(grammarElement);
//            if(grammarElement instanceof RuleCall) {
//                RuleCall rc = (RuleCall)grammarElement;
//                AbstractRule r = rc.getRule();
//                EObject c = grammarElement.eContainer();
//                
//                if(r.getName().equals("ID") && c instanceof Assignment && ((Assignment)c).getFeature().equals("text")) {
//                    INode p = node.getParent();
//                    if (p != null && p.getGrammarElement() instanceof RuleCall) {
//                        rc = (RuleCall)p.getGrammarElement();
//                        AbstractRule r1 = rc.getRule();
//                        System.out.println(r1.getName());
//                        if(r1.getName().equals("Spec")) {
//                            acceptor.addPosition(node.getOffset(), node.getLength(), SpecHighlightingConfiguration.SPEC);
//                        }
//                        else if (r1.getName().equals("Scenario")) {
//                        	acceptor.addPosition(node.getOffset(), node.getLength(), SpecHighlightingConfiguration.SCENARIO);
//                        }
//                        else if (r1.getName().equals("Step")) {
//                        	acceptor.addPosition(node.getOffset(), node.getLength(), SpecHighlightingConfiguration.STEP);
//                        }
//                    }
//                }
//            }
//        }
	}
}
