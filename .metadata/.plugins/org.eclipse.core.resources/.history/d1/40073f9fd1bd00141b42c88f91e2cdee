package io.getgauge.ui;

import io.getgauge.spec.*;
import org.eclipse.xtext.impl.TerminalRuleImpl;
import org.eclipse.xtext.nodemodel.BidiIterator;
import org.eclipse.xtext.nodemodel.BidiTreeIterator;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.nodemodel.impl.CompositeNodeWithSemanticElement;
import org.eclipse.xtext.nodemodel.impl.HiddenLeafNode;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.ui.editor.syntaxcoloring.IHighlightedPositionAcceptor;
import org.eclipse.xtext.ui.editor.syntaxcoloring.ISemanticHighlightingCalculator;

public class SpecHighlightingCalculator implements ISemanticHighlightingCalculator {

	@Override
	public void provideHighlightingFor(XtextResource resource,
			IHighlightedPositionAcceptor acceptor) {
		// TODO Auto-generated method stub
		if( resource == null || resource.getParseResult() == null ) return;
		INode root = resource.getParseResult().getRootNode();
		 BidiTreeIterator<INode> it = root.getAsTreeIterable().iterator();
		 while( it.hasNext() )
		 {
		 INode node = it.next();
		 if( node instanceof CompositeNodeWithSemanticElement && node.getSemanticElement() instanceof Spec )
		 {
		 setStyles( acceptor, it, SPEC);
		 setStyles( acceptor, node.getAsTreeIterable().reverse().iterator(), null, GROUP );
		 }
		 else if( node instanceof CompositeNodeWithSemanticElement && node.getSemanticElement() instanceof Scenario )
		 {
		 setStyles( acceptor, it, PFT, GROUP_NAME, PFT );
		 setStyles( acceptor, node.getAsTreeIterable().reverse().iterator(), null, PFT );
		 }
		 else if( node.getSemanticElement() instanceof Step )
		 {
		 setStyles( acceptor, it, GROUP_NAME );
		 }
		 }
		 
		 void setStyles( IHighlightedPositionAcceptor acceptor, BidiIterator<INode> it, String...styles )
		 {
		 for( String s : styles )
		 {
		 if( ! it.hasNext() ) return;
		 INode n = skipWhiteSpace( acceptor, it );
		 if( n != null && s != null ) acceptor.addPosition( n.getOffset(), n.getLength(), s );
		 }
		 }
		 
		 INode skipWhiteSpace( IHighlightedPositionAcceptor acceptor, BidiIterator<INode> it )
		 {
		 INode n = null;
		 while ( it.hasNext() && ( n = it.next() ).getClass() == HiddenLeafNode.class )
		 processHiddenNode( acceptor, (HiddenLeafNode)n );
		 return n;
		 }
		 
		 INode skipWhiteSpaceBackwards( IHighlightedPositionAcceptor acceptor, BidiIterator<INode> it )
		 {
		 INode n = null;
		 while ( it.hasPrevious() && ( n = it.previous() ).getClass() == HiddenLeafNode.class )
		 processHiddenNode( acceptor, (HiddenLeafNode)n );
		 return n;
		 }
		 
		 
		 
		 void processHiddenNode( IHighlightedPositionAcceptor acceptor, HiddenLeafNode node )
		 {
		 if( node.getGrammarElement() instanceof TerminalRuleImpl )
		 {
		 TerminalRuleImpl ge = (TerminalRuleImpl) node.getGrammarElement();
		 if( ge.getName().equalsIgnoreCase( "GUESS_COMMENT" ) ) acceptor.addPosition( node.getOffset(), node.getLength(), COMMENT );
		 }
	}

}
