/*
* generated by Xtext
*/
package com.thoughtworks.gauge.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class EclipseGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Spec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cNumberSignSpaceKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Assignment cNameAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cNameANY_OTHERTerminalRuleCall_0_0_1_0 = (RuleCall)cNameAssignment_0_0_1.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Assignment cNameAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cNameANY_OTHERTerminalRuleCall_0_1_0_0 = (RuleCall)cNameAssignment_0_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cScenariosAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cScenariosScenarioParserRuleCall_1_0 = (RuleCall)cScenariosAssignment_1.eContents().get(0);
		private final Assignment cStepAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStepStepParserRuleCall_2_0 = (RuleCall)cStepAssignment_2.eContents().get(0);
		
		//Spec:
		//	("# " name=ANY_OTHER | name=ANY_OTHER "="*) scenarios+=Scenario* step+=Step*;
		public ParserRule getRule() { return rule; }

		//("# " name=ANY_OTHER | name=ANY_OTHER "="*) scenarios+=Scenario* step+=Step*
		public Group getGroup() { return cGroup; }

		//"# " name=ANY_OTHER | name=ANY_OTHER "="*
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"# " name=ANY_OTHER
		public Group getGroup_0_0() { return cGroup_0_0; }

		//"# "
		public Keyword getNumberSignSpaceKeyword_0_0_0() { return cNumberSignSpaceKeyword_0_0_0; }

		//name=ANY_OTHER
		public Assignment getNameAssignment_0_0_1() { return cNameAssignment_0_0_1; }

		//ANY_OTHER
		public RuleCall getNameANY_OTHERTerminalRuleCall_0_0_1_0() { return cNameANY_OTHERTerminalRuleCall_0_0_1_0; }

		//name=ANY_OTHER "="*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//name=ANY_OTHER
		public Assignment getNameAssignment_0_1_0() { return cNameAssignment_0_1_0; }

		//ANY_OTHER
		public RuleCall getNameANY_OTHERTerminalRuleCall_0_1_0_0() { return cNameANY_OTHERTerminalRuleCall_0_1_0_0; }

		//"="*
		public Keyword getEqualsSignKeyword_0_1_1() { return cEqualsSignKeyword_0_1_1; }

		//scenarios+=Scenario*
		public Assignment getScenariosAssignment_1() { return cScenariosAssignment_1; }

		//Scenario
		public RuleCall getScenariosScenarioParserRuleCall_1_0() { return cScenariosScenarioParserRuleCall_1_0; }

		//step+=Step*
		public Assignment getStepAssignment_2() { return cStepAssignment_2; }

		//Step
		public RuleCall getStepStepParserRuleCall_2_0() { return cStepStepParserRuleCall_2_0; }
	}

	public class ScenarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Scenario");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cNumberSignNumberSignSpaceKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Assignment cNameAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cNameANY_OTHERTerminalRuleCall_0_0_1_0 = (RuleCall)cNameAssignment_0_0_1.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Assignment cNameAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cNameANY_OTHERTerminalRuleCall_0_1_0_0 = (RuleCall)cNameAssignment_0_1_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cStepsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStepsStepParserRuleCall_1_0 = (RuleCall)cStepsAssignment_1.eContents().get(0);
		
		//Scenario:
		//	("## " name=ANY_OTHER | name=ANY_OTHER "-"*) steps+=Step*;
		public ParserRule getRule() { return rule; }

		//("## " name=ANY_OTHER | name=ANY_OTHER "-"*) steps+=Step*
		public Group getGroup() { return cGroup; }

		//"## " name=ANY_OTHER | name=ANY_OTHER "-"*
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"## " name=ANY_OTHER
		public Group getGroup_0_0() { return cGroup_0_0; }

		//"## "
		public Keyword getNumberSignNumberSignSpaceKeyword_0_0_0() { return cNumberSignNumberSignSpaceKeyword_0_0_0; }

		//name=ANY_OTHER
		public Assignment getNameAssignment_0_0_1() { return cNameAssignment_0_0_1; }

		//ANY_OTHER
		public RuleCall getNameANY_OTHERTerminalRuleCall_0_0_1_0() { return cNameANY_OTHERTerminalRuleCall_0_0_1_0; }

		//name=ANY_OTHER "-"*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//name=ANY_OTHER
		public Assignment getNameAssignment_0_1_0() { return cNameAssignment_0_1_0; }

		//ANY_OTHER
		public RuleCall getNameANY_OTHERTerminalRuleCall_0_1_0_0() { return cNameANY_OTHERTerminalRuleCall_0_1_0_0; }

		//"-"*
		public Keyword getHyphenMinusKeyword_0_1_1() { return cHyphenMinusKeyword_0_1_1; }

		//steps+=Step*
		public Assignment getStepsAssignment_1() { return cStepsAssignment_1; }

		//Step
		public RuleCall getStepsStepParserRuleCall_1_0() { return cStepsStepParserRuleCall_1_0; }
	}

	public class StepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Step");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameANY_OTHERTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Step:
		//	"*" name=ANY_OTHER;
		public ParserRule getRule() { return rule; }

		//"*" name=ANY_OTHER
		public Group getGroup() { return cGroup; }

		//"*"
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }

		//name=ANY_OTHER
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ANY_OTHER
		public RuleCall getNameANY_OTHERTerminalRuleCall_1_0() { return cNameANY_OTHERTerminalRuleCall_1_0; }
	}
	
	
	private final SpecElements pSpec;
	private final ScenarioElements pScenario;
	private final StepElements pStep;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public EclipseGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSpec = new SpecElements();
		this.pScenario = new ScenarioElements();
		this.pStep = new StepElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.thoughtworks.gauge.Eclipse".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Spec:
	//	("# " name=ANY_OTHER | name=ANY_OTHER "="*) scenarios+=Scenario* step+=Step*;
	public SpecElements getSpecAccess() {
		return pSpec;
	}
	
	public ParserRule getSpecRule() {
		return getSpecAccess().getRule();
	}

	//Scenario:
	//	("## " name=ANY_OTHER | name=ANY_OTHER "-"*) steps+=Step*;
	public ScenarioElements getScenarioAccess() {
		return pScenario;
	}
	
	public ParserRule getScenarioRule() {
		return getScenarioAccess().getRule();
	}

	//Step:
	//	"*" name=ANY_OTHER;
	public StepElements getStepAccess() {
		return pStep;
	}
	
	public ParserRule getStepRule() {
		return getStepAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
