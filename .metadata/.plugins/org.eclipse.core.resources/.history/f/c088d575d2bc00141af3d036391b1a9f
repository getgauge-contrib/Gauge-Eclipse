/*
* generated by Xtext
*/
grammar InternalEclipse;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package com.thoughtworks.gauge.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.thoughtworks.gauge.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import com.thoughtworks.gauge.services.EclipseGrammarAccess;

}

@parser::members {
 
 	private EclipseGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(EclipseGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleSpec
entryRuleSpec 
:
{ before(grammarAccess.getSpecRule()); }
	 ruleSpec
{ after(grammarAccess.getSpecRule()); } 
	 EOF 
;

// Rule Spec
ruleSpec
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSpecAccess().getGroup()); }
(rule__Spec__Group__0)
{ after(grammarAccess.getSpecAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleScenario
entryRuleScenario 
:
{ before(grammarAccess.getScenarioRule()); }
	 ruleScenario
{ after(grammarAccess.getScenarioRule()); } 
	 EOF 
;

// Rule Scenario
ruleScenario
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getScenarioAccess().getGroup()); }
(rule__Scenario__Group__0)
{ after(grammarAccess.getScenarioAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStep
entryRuleStep 
:
{ before(grammarAccess.getStepRule()); }
	 ruleStep
{ after(grammarAccess.getStepRule()); } 
	 EOF 
;

// Rule Step
ruleStep
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStepAccess().getGroup()); }
(rule__Step__Group__0)
{ after(grammarAccess.getStepAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Spec__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpecAccess().getGroup_0_0()); }
(rule__Spec__Group_0_0__0)
{ after(grammarAccess.getSpecAccess().getGroup_0_0()); }
)

    |(
{ before(grammarAccess.getSpecAccess().getGroup_0_1()); }
(rule__Spec__Group_0_1__0)
{ after(grammarAccess.getSpecAccess().getGroup_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Scenario__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScenarioAccess().getGroup_0_0()); }
(rule__Scenario__Group_0_0__0)
{ after(grammarAccess.getScenarioAccess().getGroup_0_0()); }
)

    |(
{ before(grammarAccess.getScenarioAccess().getGroup_0_1()); }
(rule__Scenario__Group_0_1__0)
{ after(grammarAccess.getScenarioAccess().getGroup_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Spec__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Spec__Group__0__Impl
	rule__Spec__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Spec__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpecAccess().getAlternatives_0()); }
(rule__Spec__Alternatives_0)
{ after(grammarAccess.getSpecAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Spec__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Spec__Group__1__Impl
	rule__Spec__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Spec__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpecAccess().getScenariosAssignment_1()); }
(rule__Spec__ScenariosAssignment_1)*
{ after(grammarAccess.getSpecAccess().getScenariosAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Spec__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Spec__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Spec__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpecAccess().getStepAssignment_2()); }
(rule__Spec__StepAssignment_2)*
{ after(grammarAccess.getSpecAccess().getStepAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Spec__Group_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Spec__Group_0_0__0__Impl
	rule__Spec__Group_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Spec__Group_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpecAccess().getNumberSignSpaceKeyword_0_0_0()); }

	'# ' 

{ after(grammarAccess.getSpecAccess().getNumberSignSpaceKeyword_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Spec__Group_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Spec__Group_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Spec__Group_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpecAccess().getNameAssignment_0_0_1()); }
(rule__Spec__NameAssignment_0_0_1)
{ after(grammarAccess.getSpecAccess().getNameAssignment_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Spec__Group_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Spec__Group_0_1__0__Impl
	rule__Spec__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Spec__Group_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpecAccess().getNameAssignment_0_1_0()); }
(rule__Spec__NameAssignment_0_1_0)
{ after(grammarAccess.getSpecAccess().getNameAssignment_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Spec__Group_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Spec__Group_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Spec__Group_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpecAccess().getEqualsSignKeyword_0_1_1()); }
(
	'=' 
)*
{ after(grammarAccess.getSpecAccess().getEqualsSignKeyword_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Scenario__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Scenario__Group__0__Impl
	rule__Scenario__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Scenario__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScenarioAccess().getAlternatives_0()); }
(rule__Scenario__Alternatives_0)
{ after(grammarAccess.getScenarioAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Scenario__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Scenario__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Scenario__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScenarioAccess().getStepsAssignment_1()); }
(rule__Scenario__StepsAssignment_1)*
{ after(grammarAccess.getScenarioAccess().getStepsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Scenario__Group_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Scenario__Group_0_0__0__Impl
	rule__Scenario__Group_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Scenario__Group_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScenarioAccess().getNumberSignNumberSignSpaceKeyword_0_0_0()); }

	'## ' 

{ after(grammarAccess.getScenarioAccess().getNumberSignNumberSignSpaceKeyword_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Scenario__Group_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Scenario__Group_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Scenario__Group_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScenarioAccess().getNameAssignment_0_0_1()); }
(rule__Scenario__NameAssignment_0_0_1)
{ after(grammarAccess.getScenarioAccess().getNameAssignment_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Scenario__Group_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Scenario__Group_0_1__0__Impl
	rule__Scenario__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Scenario__Group_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScenarioAccess().getNameAssignment_0_1_0()); }
(rule__Scenario__NameAssignment_0_1_0)
{ after(grammarAccess.getScenarioAccess().getNameAssignment_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Scenario__Group_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Scenario__Group_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Scenario__Group_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScenarioAccess().getHyphenMinusKeyword_0_1_1()); }
(
	'-' 
)*
{ after(grammarAccess.getScenarioAccess().getHyphenMinusKeyword_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Step__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Step__Group__0__Impl
	rule__Step__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStepAccess().getAsteriskKeyword_0()); }

	'*' 

{ after(grammarAccess.getStepAccess().getAsteriskKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Step__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Step__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStepAccess().getNameAssignment_1()); }
(rule__Step__NameAssignment_1)
{ after(grammarAccess.getStepAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Spec__NameAssignment_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpecAccess().getNameANY_OTHERTerminalRuleCall_0_0_1_0()); }
	RULE_ANY_OTHER{ after(grammarAccess.getSpecAccess().getNameANY_OTHERTerminalRuleCall_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Spec__NameAssignment_0_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpecAccess().getNameANY_OTHERTerminalRuleCall_0_1_0_0()); }
	RULE_ANY_OTHER{ after(grammarAccess.getSpecAccess().getNameANY_OTHERTerminalRuleCall_0_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Spec__ScenariosAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpecAccess().getScenariosScenarioParserRuleCall_1_0()); }
	ruleScenario{ after(grammarAccess.getSpecAccess().getScenariosScenarioParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Spec__StepAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpecAccess().getStepStepParserRuleCall_2_0()); }
	ruleStep{ after(grammarAccess.getSpecAccess().getStepStepParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Scenario__NameAssignment_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScenarioAccess().getNameANY_OTHERTerminalRuleCall_0_0_1_0()); }
	RULE_ANY_OTHER{ after(grammarAccess.getScenarioAccess().getNameANY_OTHERTerminalRuleCall_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Scenario__NameAssignment_0_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScenarioAccess().getNameANY_OTHERTerminalRuleCall_0_1_0_0()); }
	RULE_ANY_OTHER{ after(grammarAccess.getScenarioAccess().getNameANY_OTHERTerminalRuleCall_0_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Scenario__StepsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScenarioAccess().getStepsStepParserRuleCall_1_0()); }
	ruleStep{ after(grammarAccess.getScenarioAccess().getStepsStepParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Step__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStepAccess().getNameANY_OTHERTerminalRuleCall_1_0()); }
	RULE_ANY_OTHER{ after(grammarAccess.getStepAccess().getNameANY_OTHERTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


